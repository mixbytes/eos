#!/usr/bin/env bash
set -e

# Commands:
# build tools {project_name} {ubuntu,centos}
# build prod {project_name} {ubuntu,centos}
# build dev {project_name} {ubuntu,centos}
# push tools {project_name} {ubuntu,centos}

# COMMON
ProgName="./cicd/run"
GIT_TAG=$(git describe --tags)
BUILD_DIR=build

PROJECT_NAME=$1
DIST=$2
#SHELL=$3

# DOCKER
BUILD_TOOLS_REGISTRY=$3
BUILD_TOOLS_TAG="latest"

function priv_build-in-docker(){
  local _name=$1
  local _dist=$2
  local _command="/mnt/src/${_name}/cicd/build-in-docker.sh ${_name} ${_dist}"
  if [[ $3 == "bash" ]]; then _command="bash"; fi
  docker run \
    -v "$(pwd):/mnt/src/${_name}" \
    -v "$(pwd)/${BUILD_DIR}/${_dist}/.ccache:/root/.ccache" \
    --rm --name=${_name}-${_dist}-build \
    -ti ${_name}-${_dist}-build \
    ${_command}
}

function sub_help(){
  _subcommand=$1
  case $_subcommand in
    build)
      echo "Usage: $ProgName build [options] {projact_name}"
      echo "Options:"
      echo "    -t   build toolchain"
      echo "    -p   build project"
      echo "    -d   {ubuntu,centos}"
      echo ""
      echo "Example:"
      echo "$ProgName build -d ubuntu -p haya"
      echo ""
      ;;
    *)
      echo "Usage: $ProgName <subcommand> [options]"
      echo "Subcommands:"
      echo "    build   build toolchain and project"
      echo "    push    Push toolchain and project artifacts to DockerHub and GitHub Releases"
      echo ""
      echo "For help with each subcommand run:"
      echo "$ProgName <subcommand> -h"
      echo ""
      ;;
  esac
}

function sub_build(){
  while getopts ":tphd:" opt; do
    case ${opt} in
      h)
        sub_help build
        ;;
      t )
        build_tools=1
        ;;
      p )
        build_package=1
        ;;
      d )
        _DIST=$OPTARG
        ;;
      s )
        login_to_container=1
        if [[ -z $OPTARG ]]; then
          _SHELL="bash"
        else
          _SHELL=$OPTARG
        fi
        ;;
      \? )
        echo "Invalid Option: -$OPTARG" 1>&2
        exit 1
        ;;
      : )
        echo "Invalid Option: -$OPTARG requires an argument" 1>&2
        exit 1
        ;;
    esac
  done
  shift $((OPTIND -1))
  local _PROJECT_NAME=$1
  if [[ build_tools -eq 1 ]]; then
    echo "Building toolchain!"
    docker build \
      --build-arg project_name=${_PROJECT_NAME} \
      -t ${_PROJECT_NAME}-build-tools-${_DIST}:latest \
      -f cicd/Dockerfile-${_DIST}-tools .
  fi
  if [[ build_package -eq 1 ]]; then
    echo "Building ${_PROJECT_NAME} and create package for ${_DIST}"
    local _command="/mnt/src/${_PROJECT_NAME}/cicd/build-in-docker.sh ${_PROJECT_NAME} ${_DIST}"
    if [[ login_to_container -eq 1 ]]; then _command=${_SHELL}; fi
    docker run \
      -v "$(pwd):/mnt/src/${_PROJECT_NAME}" \
      -v "$(pwd)/${BUILD_DIR}/${_DIST}/.ccache:/root/.ccache" \
      --rm --name=${_PROJECT_NAME}-${_DIST}-build \
      -ti ${_PROJECT_NAME}-build-tools-${_DIST}:latest \
      ${_command}
    fi
}

function sub_push(){
  while getopts ":p:r:f:" opt; do
    case ${opt} in
      h)
        sub_help push
        ;;
      p )
        provider=$OPTARG
        ;;
      r )
        REPO=$OPTARG
        ;;
      f )
        file=$OPTARG
        ;;
      d )
        _DIST=$OPTARG
        ;;
      \? )
        echo "Invalid Option: -$OPTARG" 1>&2
        exit 1
        ;;
      : )
        echo "Invalid Option: -$OPTARG requires an argument" 1>&2
        exit 1
        ;;
    esac
  done
  shift $((OPTIND -1))
  local _PROJECT_NAME=$1
  local BODY=""
  if [[ $provider == "github" ]]; then
    echo "Uploading asset to GitHub Releases"
    payload=$(
      jq --null-input \
         --arg tag "${GIT_TAG}" \
         --arg target_commitish "master" \
         --arg name "${GIT_TAG}" \
         --arg body "${BODY}" \
         '{ tag_name: $tag, target_commitish: $target_commitish, name: $name, body: $body, draft: true }'
    )
    response=$(
      curl --fail \
           --netrc \
           --silent \
           --location \
           --data "$payload" \
           "https://api.github.com/repos/${REPO}/releases"
    )
    upload_url="$(echo "$response" | jq -r .upload_url | sed -e "s/{?name,label}//")"
    for file in "build"/pkgs/*; do
      curl --netrc \
           --silent \
           --header "Content-Type:application/gzip" \
           --data-binary "@$file" \
           "$upload_url?name=$(basename "$file")"
    done


  fi
}

subcommand=$1

case $subcommand in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
    sub_${subcommand} $@
    if [ $? = 127 ]; then
      echo "Error: '$subcommand' is not a known subcommand." >&2
      echo "       Run '$ProgName --help' for a list of known subcommands." >&2
      exit 1
    fi
    ;;
esac

